# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- feature-ms-johnnySoliz-mensaje

pool:
  vmImage: ubuntu-latest

steps:
- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build JacocoTestReport'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    sonarQubeRunAnalysis: false
    spotBugsAnalysis: false
  displayName: 'Build Plugin'

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: |
        **/build/libs/*.jar
        **/build/**/*.xml
    targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: appJar
    publishLocation: 'Container'

- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'appJar'
    downloadPath: '$(Pipeline.Workspace)'
  displayName: Descarga Jar

- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'lab azure marcelo'
    scannerMode: 'Other'
    extraProperties: |
      # Additional properties that will be passed to the scanner,
      # Put one key=value per line, example:
      # sonar.exclusions=**/*.bin
      sonar.projectKey=microservicio-spring-js
      sonar.coverage.jacoco.xmlReportPaths$(Pipeline.Workspace)/appJar/build/reports/jacoco/test/jacocoTestReport.xml
  displayName: 'SonarQube Prepare'

- task: Gradle@3
  inputs:
        gradleWrapperFile: 'gradlew'
        tasks: "build jacocoTestReport"
        javaHomeOption: 'JDKVersion'
        sonarQubeRunAnalysis: true
        sqGradlePluginVersionChoice: 'specify'
        sonarQubeGradlePluginVersion: '3.3'
  displayName: 'Analyze current Branch'

- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'
- task: sonar-buildbreaker@8
  inputs:
    SonarQube: 'lab azure marcelo'

- script: "mkdir -p build/libs; mv $(Pipeline.Workspace)/appJar/build/libs/ build/; chmod -R 555 build/libs"  
  displayName:  Se mueve JAR a carpeta raiz


- task: Docker@2
  inputs:
    containerRegistry: 'Docker Hub registry'
    command: 'login'
- task: Docker@2
  inputs:
    containerRegistry: 'Docker Hub registry'
    repository: 'johnnysolizv/registry'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: 'latest'

- task: KubectlInstaller@0
  inputs:
    kubectlVersion: 'latest'
  displayName: Instalacion Kubectl

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'cluster_kubernetes_js'
    namespace: 'default'
    command: 'login'
  displayName: AKS Login
  
- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'cluster_kubernetes_js'
    namespace: 'default'
    command: 'apply'
    arguments: '-f kubernetes/deployment-app.yaml'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
    azureSubscriptionEndpointForSecrets: 'Azure subscription 1(d60162bf-52b5-4092-b2ac-0a13af2037f3)'
  displayName: AKS deploy

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'cluster_kubernetes_js'
    namespace: 'default'
    command: 'expose'
    arguments: 'deployment spring-deployment --type=LoadBalancer --name=springv3'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
    azureSubscriptionEndpointForSecrets: 'Azure subscription 1(d60162bf-52b5-4092-b2ac-0a13af2037f3)'
  displayName: aks expose deployment

- script: |
    ipApp=$(kubectl get servicesv3 spring --output jsonpath='{.spec.clusterIP}')
    echo $ipApp
    URLApp=http://$ipApp:8080
    echo $URLApp
    echo "##vso[task.setvariable variable=appDeploy;isOutput=true]$URLApp"
  name: getip
  displayName: Get IP